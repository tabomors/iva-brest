{"version":3,"sources":["webpack:///./src/templates/Catalog.js"],"names":["query","Catalog","_ref","nodes","data","allContentfulProduct","edges","map","_ref2","node","length","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","key","id","JSON","stringify","src","picture","file","url","alt","name","width"],"mappings":"+JAkDaA,EAAK,aAqBHC,UAnEC,SAAAC,GAIV,IACEC,EADFD,EAHJE,KACEC,qBAAwBC,MAGNC,IAAI,SAAAC,GAAA,OAAAA,EAAGC,OAC3B,OAAKN,EAAMO,OAGTC,EAAAC,EAAAC,cAAA,UACGV,EAAMI,IAAI,SAAAE,GACT,OACEE,EAAAC,EAAAC,cAAA,MAAIC,IAAKL,EAAKM,IACZJ,EAAAC,EAAAC,cAAA,WAAMG,KAAKC,UAAUR,EAAM,KAAM,OAEjCE,EAAAC,EAAAC,cAAA,OAAKK,IAAKT,EAAKU,QAAQC,KAAKC,IAAKC,IAAKb,EAAKc,KAAMC,MAAO,UATxCb,EAAAC,EAAAC,cAAA","file":"component---src-templates-catalog-js-5c3494be489b957a2546.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nconst Catalog = ({\n  data: {\n    allContentfulProduct: { edges },\n  },\n}) => {\n  const nodes = edges.map(({ node }) => node);\n  if (!nodes.length) return <p>На данный момент нет экземпляров этой категории</p>;\n\n  return (\n    <ul>\n      {nodes.map(node => {\n        return (\n          <li key={node.id}>\n            <pre>{JSON.stringify(node, null, '\\t')}</pre>\n            {/* TODO: replace it with gatsby-image in the future */}\n            <img src={node.picture.file.url} alt={node.name} width={300} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nconst dataShape = PropTypes.shape({\n  allContentfulProduct: PropTypes.shape({\n    edges: PropTypes.arrayOf(\n      PropTypes.shape({\n        node: PropTypes.shape({\n          id: PropTypes.string.isRequired,\n          name: PropTypes.string.isRequired,\n          picture: PropTypes.shape({\n            file: PropTypes.shape({\n              fileName: PropTypes.string.isRequired,\n              url: PropTypes.string.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired,\n      }).isRequired\n    ).isRequired,\n  }).isRequired,\n});\n\nCatalog.propTypes = {\n  data: dataShape,\n};\n\nexport const query = graphql`\n  query GetProducts($slug: String) {\n    allContentfulProduct(filter: { category: { eq: $slug } }) {\n      edges {\n        node {\n          name\n          picture {\n            file {\n              fileName\n              url\n            }\n          }\n          id\n          category\n          slug\n        }\n      }\n    }\n  }\n`;\n\nexport default Catalog;\n"],"sourceRoot":""}